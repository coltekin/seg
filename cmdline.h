/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "seg"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "seg"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "62aad35"
#endif

enum enum_input_format { input_format__NULL = -1, input_format_arg_seg = 0, input_format_arg_unseg, input_format_arg_mc };
enum enum_print_ptp { print_ptp__NULL = -1, print_ptp_arg_jp = 0, print_ptp_arg_tp, print_ptp_arg_mi, print_ptp_arg_sv, print_ptp_arg_h, print_ptp_arg_rtp, print_ptp_arg_rsv, print_ptp_arg_rh, print_ptp_arg_none };
enum enum_score { score__NULL = -1, score_arg_first = 0, score_arg_random, score_arg_best, score_arg_any };
enum enum_pred_m { pred_m__NULL = -1, pred_m_arg_jp = 0, pred_m_arg_tp, pred_m_arg_mi, pred_m_arg_sv, pred_m_arg_h, pred_m_arg_rtp, pred_m_arg_rsv, pred_m_arg_rh };
enum enum_lexicon_partial { lexicon_partial__NULL = -1, lexicon_partial_arg_all = 0, lexicon_partial_arg_one, lexicon_partial_arg_begin, lexicon_partial_arg_end, lexicon_partial_arg_beginend, lexicon_partial_arg_none };
enum enum_lex_wcombine { lex_wcombine__NULL = -1, lex_wcombine_arg_best = 0, lex_wcombine_arg_mean, lex_wcombine_arg_sum };
enum enum_lex_norm { lex_norm__NULL = -1, lex_norm_arg_none = 0, lex_norm_arg_z };
enum enum_lex { lex__NULL = -1, lex_arg_lc = 0, lex_arg_lf, lex_arg_lp };
enum enum_lex_dir { lex_dir__NULL = -1, lex_dir_arg_lr = 0, lex_dir_arg_rl, lex_dir_arg_both };
enum enum_stress { stress__NULL = -1, stress_arg_ub = 0, stress_arg_transition, stress_arg_cheat, stress_arg_sylcheat };
enum enum_ub_type { ub_type__NULL = -1, ub_type_arg_ubegin = 0, ub_type_arg_uend, ub_type_arg_both };
enum enum_method { method__NULL = -1, method_arg_lexicon = 0, method_arg_lm, method_arg_random, method_arg_lexc, method_arg_nv, method_arg_combine };
enum enum_cues { cues__NULL = -1, cues_arg_pred = 0, cues_arg_phon, cues_arg_stress, cues_arg_lex };
enum enum_cue_source { cue_source__NULL = -1, cue_source_arg_utterances = 0, cue_source_arg_segments, cue_source_arg_lexicon };
enum enum_pred_source { pred_source__NULL = -1, pred_source_arg_utterances = 0, pred_source_arg_segments, pred_source_arg_lexicon };
enum enum_phon_source { phon_source__NULL = -1, phon_source_arg_utterances = 0, phon_source_arg_segments, phon_source_arg_lexicon };
enum enum_stress_source { stress_source__NULL = -1, stress_source_arg_utterances = 0, stress_source_arg_segments, stress_source_arg_lexicon };
enum enum_lex_source { lex_source__NULL = -1, lex_source_arg_utterances = 0, lex_source_arg_segments, lex_source_arg_lexicon };
enum enum_combine { combine__NULL = -1, combine_arg_mv = 0, combine_arg_wmv, combine_arg_all, combine_arg_any };
enum enum_boundary_method { boundary_method__NULL = -1, boundary_method_arg_peak = 0, boundary_method_arg_threshold, boundary_method_arg_none, boundary_method_arg_all };
enum enum_peak { peak__NULL = -1, peak_arg_strict = 0, peak_arg_relaxed, peak_arg_dual, peak_arg_right, peak_arg_left, peak_arg_lr, peak_arg_strict2 };
enum enum_norm { norm__NULL = -1, norm_arg_none = 0, norm_arg_zscore, norm_arg_mdiff, norm_arg_mdivide };
enum enum_vote { vote__NULL = -1, vote_arg_binary = 0, vote_arg_diff, vote_arg_lgdiff };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int debug_arg;	/**< @brief debug level (default='0').  */
  char * debug_orig;	/**< @brief debug level original value given at command line.  */
  const char *debug_help; /**< @brief debug level help description.  */
  int quiet_flag;	/**< @brief be quiet (default=off).  */
  const char *quiet_help; /**< @brief be quiet help description.  */
  int color_flag;	/**< @brief color output (default=off).  */
  const char *color_help; /**< @brief color output help description.  */
  int progress_arg;	/**< @brief print progress (default='100').  */
  char * progress_orig;	/**< @brief print progress original value given at command line.  */
  const char *progress_help; /**< @brief print progress help description.  */
  char * input_arg;	/**< @brief input file name (default='br-phono.txt').  */
  char * input_orig;	/**< @brief input file name original value given at command line.  */
  const char *input_help; /**< @brief input file name help description.  */
  char * stress_file_arg;	/**< @brief  filename to read stress patterns from.  */
  char * stress_file_orig;	/**< @brief  filename to read stress patterns from original value given at command line.  */
  const char *stress_file_help; /**< @brief  filename to read stress patterns from help description.  */
  enum enum_input_format input_format_arg;	/**< @brief input file format:
   seg: one segmented utterance/word per line
   unseg: one unsegmented utterance/word per line
   mc: MorphoChallenge format, <freq,unseg> pairs (default='seg').  */
  char * input_format_orig;	/**< @brief input file format:
   seg: one segmented utterance/word per line
   unseg: one unsegmented utterance/word per line
   mc: MorphoChallenge format, <freq,unseg> pairs original value given at command line.  */
  const char *input_format_help; /**< @brief input file format:
   seg: one segmented utterance/word per line
   unseg: one unsegmented utterance/word per line
   mc: MorphoChallenge format, <freq,unseg> pairs help description.  */
  char * output_arg;	/**< @brief output file name (default='-').  */
  char * output_orig;	/**< @brief output file name original value given at command line.  */
  const char *output_help; /**< @brief output file name help description.  */
  char * inlex_arg;	/**< @brief input lexicon file.  */
  char * inlex_orig;	/**< @brief input lexicon file original value given at command line.  */
  const char *inlex_help; /**< @brief input lexicon file help description.  */
  char * outlex_arg;	/**< @brief output lexicon file (default='-').  */
  char * outlex_orig;	/**< @brief output lexicon file original value given at command line.  */
  const char *outlex_help; /**< @brief output lexicon file help description.  */
  long shuffle_arg;	/**< @brief randomize the input utternaces. if SEED is not given, current time is used as seed (default='-1').  */
  char * shuffle_orig;	/**< @brief randomize the input utternaces. if SEED is not given, current time is used as seed original value given at command line.  */
  const char *shuffle_help; /**< @brief randomize the input utternaces. if SEED is not given, current time is used as seed help description.  */
  int print_flag;	/**< @brief print predictability measures given in --pred and exit (default=off).  */
  const char *print_help; /**< @brief print predictability measures given in --pred and exit help description.  */
  int print_lb_flag;	/**< @brief print word boundary information for each measure (default=off).  */
  const char *print_lb_help; /**< @brief print word boundary information for each measure help description.  */
  int print_ub_flag;	/**< @brief print utterance boundary information for each measure (default=off).  */
  const char *print_ub_help; /**< @brief print utterance boundary information for each measure help description.  */
  int print_header_flag;	/**< @brief print a header describing each field (default=off).  */
  const char *print_header_help; /**< @brief print a header describing each field help description.  */
  int print_ph_flag;	/**< @brief print the phoneme before the predictability measure (default=off).  */
  const char *print_ph_help; /**< @brief print the phoneme before the predictability measure help description.  */
  int print_unum_flag;	/**< @brief print the utterance number (default=off).  */
  const char *print_unum_help; /**< @brief print the utterance number help description.  */
  int print_phng_flag;	/**< @brief print phoneme ngrams before the predictability measure (default=off).  */
  const char *print_phng_help; /**< @brief print phoneme ngrams before the predictability measure help description.  */
  enum enum_print_ptp *print_ptp_arg;	/**< @brief Print Hockema's ptp values, and some more (default='none').  */
  char ** print_ptp_orig;	/**< @brief Print Hockema's ptp values, and some more original value given at command line.  */
  unsigned int print_ptp_min; /**< @brief Print Hockema's ptp values, and some more's minimum occurreces */
  unsigned int print_ptp_max; /**< @brief Print Hockema's ptp values, and some more's maximum occurreces */
  const char *print_ptp_help; /**< @brief Print Hockema's ptp values, and some more help description.  */
  int print_wfreq_arg;	/**< @brief Print frequency of all candidate words upto length N (default='11').  */
  char * print_wfreq_orig;	/**< @brief Print frequency of all candidate words upto length N original value given at command line.  */
  const char *print_wfreq_help; /**< @brief Print frequency of all candidate words upto length N help description.  */
  int print_wfreq_sum_flag;	/**< @brief Print summary during --print-wfreq (default=off).  */
  const char *print_wfreq_sum_help; /**< @brief Print summary during --print-wfreq help description.  */
  int print_latex_flag;	/**< @brief print tabular material with latex separators (default=off).  */
  const char *print_latex_help; /**< @brief print tabular material with latex separators help description.  */
  int print_prf_arg;	/**< @brief print precision/recall/f-score. If the optional
  argument, N,  is given and positive, print the scores after every N input
  utterance. If N is negative, the print the scores for last N
  utterances. (default='0').  */
  char * print_prf_orig;	/**< @brief print precision/recall/f-score. If the optional
  argument, N,  is given and positive, print the scores after every N input
  utterance. If N is negative, the print the scores for last N
  utterances. original value given at command line.  */
  const char *print_prf_help; /**< @brief print precision/recall/f-score. If the optional
  argument, N,  is given and positive, print the scores after every N input
  utterance. If N is negative, the print the scores for last N
  utterances. help description.  */
  enum enum_score score_arg;	/**< @brief the segmentation to pick in case of multiple outputs (default='first').  */
  char * score_orig;	/**< @brief the segmentation to pick in case of multiple outputs original value given at command line.  */
  const char *score_help; /**< @brief the segmentation to pick in case of multiple outputs help description.  */
  int score_edges_flag;	/**< @brief include utterance edges in BP/BR calculation (default=off).  */
  const char *score_edges_help; /**< @brief include utterance edges in BP/BR calculation help description.  */
  double alpha_arg;	/**< @brief parameter for lm1 segmentation (default='0.5').  */
  char * alpha_orig;	/**< @brief parameter for lm1 segmentation original value given at command line.  */
  const char *alpha_help; /**< @brief parameter for lm1 segmentation help description.  */
  enum enum_pred_m *pred_m_arg;	/**< @brief measure(s) to use for predictability based segmentation (default='tp').  */
  char ** pred_m_orig;	/**< @brief measure(s) to use for predictability based segmentation original value given at command line.  */
  unsigned int pred_m_min; /**< @brief measure(s) to use for predictability based segmentation's minimum occurreces */
  unsigned int pred_m_max; /**< @brief measure(s) to use for predictability based segmentation's maximum occurreces */
  const char *pred_m_help; /**< @brief measure(s) to use for predictability based segmentation help description.  */
  int pred_norm_flag;	/**< @brief normalize the predictability scores (default=off).  */
  const char *pred_norm_help; /**< @brief normalize the predictability scores help description.  */
  int pred_xlen_arg;	/**< @brief first ngram size for predictability based measures (default='1').  */
  char * pred_xlen_orig;	/**< @brief first ngram size for predictability based measures original value given at command line.  */
  const char *pred_xlen_help; /**< @brief first ngram size for predictability based measures help description.  */
  int pred_ylen_arg;	/**< @brief second ngram size for predictability based measures (default='1').  */
  char * pred_ylen_orig;	/**< @brief second ngram size for predictability based measures original value given at command line.  */
  const char *pred_ylen_help; /**< @brief second ngram size for predictability based measures help description.  */
  int pred_xmax_arg;	/**< @brief max first ngram size for predictability based measures (default='3').  */
  char * pred_xmax_orig;	/**< @brief max first ngram size for predictability based measures original value given at command line.  */
  const char *pred_xmax_help; /**< @brief max first ngram size for predictability based measures help description.  */
  int pred_ymax_arg;	/**< @brief max second ngram size for predictability based measures (default='1').  */
  char * pred_ymax_orig;	/**< @brief max second ngram size for predictability based measures original value given at command line.  */
  const char *pred_ymax_help; /**< @brief max second ngram size for predictability based measures help description.  */
  int pred_xmin_arg;	/**< @brief min first ngram size for predictability based measures (default='1').  */
  char * pred_xmin_orig;	/**< @brief min first ngram size for predictability based measures original value given at command line.  */
  const char *pred_xmin_help; /**< @brief min first ngram size for predictability based measures help description.  */
  int pred_ymin_arg;	/**< @brief min second ngram size for predictability based measures (default='1').  */
  char * pred_ymin_orig;	/**< @brief min second ngram size for predictability based measures original value given at command line.  */
  const char *pred_ymin_help; /**< @brief min second ngram size for predictability based measures help description.  */
  int pred_printw_flag;	/**< @brief print the final weights at the end of the segmentation (default=off).  */
  const char *pred_printw_help; /**< @brief print the final weights at the end of the segmentation help description.  */
  int pred_printoptions_flag;	/**< @brief print the options before the segmentation (default=off).  */
  const char *pred_printoptions_help; /**< @brief print the options before the segmentation help description.  */
  int pred_swaplr_flag;	/**< @brief swap the l & r values for reverse measures (default=on).  */
  const char *pred_swaplr_help; /**< @brief swap the l & r values for reverse measures help description.  */
  int random_seed_arg;	/**< @brief seed for pseudo-random number generator.  */
  char * random_seed_orig;	/**< @brief seed for pseudo-random number generator original value given at command line.  */
  const char *random_seed_help; /**< @brief seed for pseudo-random number generator help description.  */
  double random_rate_arg;	/**< @brief rate of boundaries, should be a number between 0 (no boundaries) an 1 (all boundaries) (default='0.5').  */
  char * random_rate_orig;	/**< @brief rate of boundaries, should be a number between 0 (no boundaries) an 1 (all boundaries) original value given at command line.  */
  const char *random_rate_help; /**< @brief rate of boundaries, should be a number between 0 (no boundaries) an 1 (all boundaries) help description.  */
  enum enum_lexicon_partial lexicon_partial_arg;	/**< @brief do partial segmentation (default='none').  */
  char * lexicon_partial_orig;	/**< @brief do partial segmentation original value given at command line.  */
  const char *lexicon_partial_help; /**< @brief do partial segmentation help description.  */
  int lex_nglen_arg;	/**< @brief ngram size for keeping statistics about the phonemes in the lexicon (default='5').  */
  char * lex_nglen_orig;	/**< @brief ngram size for keeping statistics about the phonemes in the lexicon original value given at command line.  */
  const char *lex_nglen_help; /**< @brief ngram size for keeping statistics about the phonemes in the lexicon help description.  */
  int lex_useprior_flag;	/**< @brief use utterances in --prior-data as initial lexicon statistics (default=on).  */
  const char *lex_useprior_help; /**< @brief use utterances in --prior-data as initial lexicon statistics help description.  */
  double lex_minfreq_arg;	/**< @brief frequencey of an ngram to qualify as a word (default='0.0').  */
  char * lex_minfreq_orig;	/**< @brief frequencey of an ngram to qualify as a word original value given at command line.  */
  const char *lex_minfreq_help; /**< @brief frequencey of an ngram to qualify as a word help description.  */
  double lex_minent_arg;	/**< @brief left and right entropy of an ngram to qualify as a word (default='-1.0').  */
  char * lex_minent_orig;	/**< @brief left and right entropy of an ngram to qualify as a word original value given at command line.  */
  const char *lex_minent_help; /**< @brief left and right entropy of an ngram to qualify as a word help description.  */
  int lex_mult_arg;	/**< @brief multiply lexicon votes N times (default='1').  */
  char * lex_mult_orig;	/**< @brief multiply lexicon votes N times original value given at command line.  */
  const char *lex_mult_help; /**< @brief multiply lexicon votes N times help description.  */
  enum enum_lex_wcombine lex_wcombine_arg;	/**< @brief how to combine LF/LC for multiple words (default='sum').  */
  char * lex_wcombine_orig;	/**< @brief how to combine LF/LC for multiple words original value given at command line.  */
  const char *lex_wcombine_help; /**< @brief how to combine LF/LC for multiple words help description.  */
  enum enum_lex_norm lex_norm_arg;	/**< @brief normalization method for LF/LC (default='none').  */
  char * lex_norm_orig;	/**< @brief normalization method for LF/LC original value given at command line.  */
  const char *lex_norm_help; /**< @brief normalization method for LF/LC help description.  */
  enum enum_lex *lex_arg;	/**< @brief measure(s) to use for lexicon based segmentation (default='lf').  */
  char ** lex_orig;	/**< @brief measure(s) to use for lexicon based segmentation original value given at command line.  */
  unsigned int lex_min; /**< @brief measure(s) to use for lexicon based segmentation's minimum occurreces */
  unsigned int lex_max; /**< @brief measure(s) to use for lexicon based segmentation's maximum occurreces */
  const char *lex_help; /**< @brief measure(s) to use for lexicon based segmentation help description.  */
  enum enum_lex_dir lex_dir_arg;	/**< @brief direction of lexal measures (default='both').  */
  char * lex_dir_orig;	/**< @brief direction of lexal measures original value given at command line.  */
  const char *lex_dir_help; /**< @brief direction of lexal measures help description.  */
  enum enum_stress stress_arg;	/**< @brief method to calculate stress information (default='ub').  */
  char * stress_orig;	/**< @brief method to calculate stress information original value given at command line.  */
  const char *stress_help; /**< @brief method to calculate stress information help description.  */
  int ub_nglen_arg;	/**< @brief phoneme ngram length (default='2').  */
  char * ub_nglen_orig;	/**< @brief phoneme ngram length original value given at command line.  */
  const char *ub_nglen_help; /**< @brief phoneme ngram length help description.  */
  int ub_ngmin_arg;	/**< @brief minimum phoneme ngram length (default='1').  */
  char * ub_ngmin_orig;	/**< @brief minimum phoneme ngram length original value given at command line.  */
  const char *ub_ngmin_help; /**< @brief minimum phoneme ngram length help description.  */
  int ub_ngmax_arg;	/**< @brief maximum phoneme ngram length (default='3').  */
  char * ub_ngmax_orig;	/**< @brief maximum phoneme ngram length original value given at command line.  */
  const char *ub_ngmax_help; /**< @brief maximum phoneme ngram length help description.  */
  int ub_lmin_arg;	/**< @brief maximum left phoneme ngram length (default='1').  */
  char * ub_lmin_orig;	/**< @brief maximum left phoneme ngram length original value given at command line.  */
  const char *ub_lmin_help; /**< @brief maximum left phoneme ngram length help description.  */
  int ub_lmax_arg;	/**< @brief minimum left phoneme ngram length (default='3').  */
  char * ub_lmax_orig;	/**< @brief minimum left phoneme ngram length original value given at command line.  */
  const char *ub_lmax_help; /**< @brief minimum left phoneme ngram length help description.  */
  int ub_rmin_arg;	/**< @brief maximum right phoneme ngram length (default='1').  */
  char * ub_rmin_orig;	/**< @brief maximum right phoneme ngram length original value given at command line.  */
  const char *ub_rmin_help; /**< @brief maximum right phoneme ngram length help description.  */
  int ub_rmax_arg;	/**< @brief minimum right phoneme ngram length (default='3').  */
  char * ub_rmax_orig;	/**< @brief minimum right phoneme ngram length original value given at command line.  */
  const char *ub_rmax_help; /**< @brief minimum right phoneme ngram length help description.  */
  enum enum_ub_type ub_type_arg;	/**< @brief part of the utterance boundaries to use (default='both').  */
  char * ub_type_orig;	/**< @brief part of the utterance boundaries to use original value given at command line.  */
  const char *ub_type_help; /**< @brief part of the utterance boundaries to use help description.  */
  int sub_ngmin_arg;	/**< @brief minimum ngram length for stress (otherwise inherited from ub-ngmin) (default='2').  */
  char * sub_ngmin_orig;	/**< @brief minimum ngram length for stress (otherwise inherited from ub-ngmin) original value given at command line.  */
  const char *sub_ngmin_help; /**< @brief minimum ngram length for stress (otherwise inherited from ub-ngmin) help description.  */
  int sub_ngmax_arg;	/**< @brief maximum ngram length for stress (otherwise inherited from ub-ngmax) (default='2').  */
  char * sub_ngmax_orig;	/**< @brief maximum ngram length for stress (otherwise inherited from ub-ngmax) original value given at command line.  */
  const char *sub_ngmax_help; /**< @brief maximum ngram length for stress (otherwise inherited from ub-ngmax) help description.  */
  enum enum_method method_arg;	/**< @brief segmentation method(s), some can be combined (default='combine').  */
  char * method_orig;	/**< @brief segmentation method(s), some can be combined original value given at command line.  */
  const char *method_help; /**< @brief segmentation method(s), some can be combined help description.  */
  enum enum_cues *cues_arg;	/**< @brief list of cues to combine (default='pred').  */
  char ** cues_orig;	/**< @brief list of cues to combine original value given at command line.  */
  unsigned int cues_min; /**< @brief list of cues to combine's minimum occurreces */
  unsigned int cues_max; /**< @brief list of cues to combine's maximum occurreces */
  const char *cues_help; /**< @brief list of cues to combine help description.  */
  enum enum_cue_source cue_source_arg;	/**< @brief default source for all cues (default='utterances').  */
  char * cue_source_orig;	/**< @brief default source for all cues original value given at command line.  */
  const char *cue_source_help; /**< @brief default source for all cues help description.  */
  int psb_cheat_flag;	/**< @brief update statistics for source=segm first from the utterances, and later when boundaries are decided (default=off).  */
  const char *psb_cheat_help; /**< @brief update statistics for source=segm first from the utterances, and later when boundaries are decided help description.  */
  enum enum_pred_source pred_source_arg;	/**< @brief source for all predictability statistics.  */
  char * pred_source_orig;	/**< @brief source for all predictability statistics original value given at command line.  */
  const char *pred_source_help; /**< @brief source for all predictability statistics help description.  */
  enum enum_phon_source phon_source_arg;	/**< @brief source for all phonotactics statistics.  */
  char * phon_source_orig;	/**< @brief source for all phonotactics statistics original value given at command line.  */
  const char *phon_source_help; /**< @brief source for all phonotactics statistics help description.  */
  enum enum_stress_source stress_source_arg;	/**< @brief source for all stress statistics.  */
  char * stress_source_orig;	/**< @brief source for all stress statistics original value given at command line.  */
  const char *stress_source_help; /**< @brief source for all stress statistics help description.  */
  enum enum_lex_source lex_source_arg;	/**< @brief source for all lexicon statistics.  */
  char * lex_source_orig;	/**< @brief source for all lexicon statistics original value given at command line.  */
  const char *lex_source_help; /**< @brief source for all lexicon statistics help description.  */
  enum enum_combine combine_arg;	/**< @brief combination method for multiple cues (default='wmv').  */
  char * combine_orig;	/**< @brief combination method for multiple cues original value given at command line.  */
  const char *combine_help; /**< @brief combination method for multiple cues help description.  */
  double combine_rate_arg;	/**< @brief rate of votes for deciding for a boundary (default='0.5').  */
  char * combine_rate_orig;	/**< @brief rate of votes for deciding for a boundary original value given at command line.  */
  const char *combine_rate_help; /**< @brief rate of votes for deciding for a boundary help description.  */
  enum enum_boundary_method boundary_method_arg;	/**< @brief method to decide for a boundary (default='peak').  */
  char * boundary_method_orig;	/**< @brief method to decide for a boundary original value given at command line.  */
  const char *boundary_method_help; /**< @brief method to decide for a boundary help description.  */
  enum enum_peak peak_arg;	/**< @brief how to count peaks for peak based decision (default='dual').  */
  char * peak_orig;	/**< @brief how to count peaks for peak based decision original value given at command line.  */
  const char *peak_help; /**< @brief how to count peaks for peak based decision help description.  */
  double threshold_arg;	/**< @brief threshold to use for deciding boundaries (default='0.0').  */
  char * threshold_orig;	/**< @brief threshold to use for deciding boundaries original value given at command line.  */
  const char *threshold_help; /**< @brief threshold to use for deciding boundaries help description.  */
  enum enum_norm norm_arg;	/**< @brief normalize the measures with given method before using (default='none').  */
  char * norm_orig;	/**< @brief normalize the measures with given method before using original value given at command line.  */
  const char *norm_help; /**< @brief normalize the measures with given method before using help description.  */
  enum enum_vote vote_arg;	/**< @brief what to return as vote (default='binary').  */
  char * vote_orig;	/**< @brief what to return as vote original value given at command line.  */
  const char *vote_help; /**< @brief what to return as vote help description.  */
  char * prior_data_arg;	/**< @brief filename to build prior statistics from, if filename is not specified, the statistics are calculated on the first pass on the input file. (default='input').  */
  char * prior_data_orig;	/**< @brief filename to build prior statistics from, if filename is not specified, the statistics are calculated on the first pass on the input file. original value given at command line.  */
  const char *prior_data_help; /**< @brief filename to build prior statistics from, if filename is not specified, the statistics are calculated on the first pass on the input file. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int quiet_given ;	/**< @brief Whether quiet was given.  */
  unsigned int color_given ;	/**< @brief Whether color was given.  */
  unsigned int progress_given ;	/**< @brief Whether progress was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int stress_file_given ;	/**< @brief Whether stress-file was given.  */
  unsigned int input_format_given ;	/**< @brief Whether input-format was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int inlex_given ;	/**< @brief Whether inlex was given.  */
  unsigned int outlex_given ;	/**< @brief Whether outlex was given.  */
  unsigned int shuffle_given ;	/**< @brief Whether shuffle was given.  */
  unsigned int print_given ;	/**< @brief Whether print was given.  */
  unsigned int print_lb_given ;	/**< @brief Whether print-lb was given.  */
  unsigned int print_ub_given ;	/**< @brief Whether print-ub was given.  */
  unsigned int print_header_given ;	/**< @brief Whether print-header was given.  */
  unsigned int print_ph_given ;	/**< @brief Whether print-ph was given.  */
  unsigned int print_unum_given ;	/**< @brief Whether print-unum was given.  */
  unsigned int print_phng_given ;	/**< @brief Whether print-phng was given.  */
  unsigned int print_ptp_given ;	/**< @brief Whether print-ptp was given.  */
  unsigned int print_wfreq_given ;	/**< @brief Whether print-wfreq was given.  */
  unsigned int print_wfreq_sum_given ;	/**< @brief Whether print-wfreq-sum was given.  */
  unsigned int print_latex_given ;	/**< @brief Whether print-latex was given.  */
  unsigned int print_prf_given ;	/**< @brief Whether print-prf was given.  */
  unsigned int score_given ;	/**< @brief Whether score was given.  */
  unsigned int score_edges_given ;	/**< @brief Whether score-edges was given.  */
  unsigned int alpha_given ;	/**< @brief Whether alpha was given.  */
  unsigned int pred_m_given ;	/**< @brief Whether pred-m was given.  */
  unsigned int pred_norm_given ;	/**< @brief Whether pred-norm was given.  */
  unsigned int pred_xlen_given ;	/**< @brief Whether pred-xlen was given.  */
  unsigned int pred_ylen_given ;	/**< @brief Whether pred-ylen was given.  */
  unsigned int pred_xmax_given ;	/**< @brief Whether pred-xmax was given.  */
  unsigned int pred_ymax_given ;	/**< @brief Whether pred-ymax was given.  */
  unsigned int pred_xmin_given ;	/**< @brief Whether pred-xmin was given.  */
  unsigned int pred_ymin_given ;	/**< @brief Whether pred-ymin was given.  */
  unsigned int pred_printw_given ;	/**< @brief Whether pred-printw was given.  */
  unsigned int pred_printoptions_given ;	/**< @brief Whether pred-printoptions was given.  */
  unsigned int pred_swaplr_given ;	/**< @brief Whether pred-swaplr was given.  */
  unsigned int random_seed_given ;	/**< @brief Whether random-seed was given.  */
  unsigned int random_rate_given ;	/**< @brief Whether random-rate was given.  */
  unsigned int lexicon_partial_given ;	/**< @brief Whether lexicon-partial was given.  */
  unsigned int lex_nglen_given ;	/**< @brief Whether lex-nglen was given.  */
  unsigned int lex_useprior_given ;	/**< @brief Whether lex-useprior was given.  */
  unsigned int lex_minfreq_given ;	/**< @brief Whether lex-minfreq was given.  */
  unsigned int lex_minent_given ;	/**< @brief Whether lex-minent was given.  */
  unsigned int lex_mult_given ;	/**< @brief Whether lex-mult was given.  */
  unsigned int lex_wcombine_given ;	/**< @brief Whether lex-wcombine was given.  */
  unsigned int lex_norm_given ;	/**< @brief Whether lex-norm was given.  */
  unsigned int lex_given ;	/**< @brief Whether lex was given.  */
  unsigned int lex_dir_given ;	/**< @brief Whether lex-dir was given.  */
  unsigned int stress_given ;	/**< @brief Whether stress was given.  */
  unsigned int ub_nglen_given ;	/**< @brief Whether ub-nglen was given.  */
  unsigned int ub_ngmin_given ;	/**< @brief Whether ub-ngmin was given.  */
  unsigned int ub_ngmax_given ;	/**< @brief Whether ub-ngmax was given.  */
  unsigned int ub_lmin_given ;	/**< @brief Whether ub-lmin was given.  */
  unsigned int ub_lmax_given ;	/**< @brief Whether ub-lmax was given.  */
  unsigned int ub_rmin_given ;	/**< @brief Whether ub-rmin was given.  */
  unsigned int ub_rmax_given ;	/**< @brief Whether ub-rmax was given.  */
  unsigned int ub_type_given ;	/**< @brief Whether ub-type was given.  */
  unsigned int sub_ngmin_given ;	/**< @brief Whether sub-ngmin was given.  */
  unsigned int sub_ngmax_given ;	/**< @brief Whether sub-ngmax was given.  */
  unsigned int method_given ;	/**< @brief Whether method was given.  */
  unsigned int cues_given ;	/**< @brief Whether cues was given.  */
  unsigned int cue_source_given ;	/**< @brief Whether cue-source was given.  */
  unsigned int psb_cheat_given ;	/**< @brief Whether psb-cheat was given.  */
  unsigned int pred_source_given ;	/**< @brief Whether pred-source was given.  */
  unsigned int phon_source_given ;	/**< @brief Whether phon-source was given.  */
  unsigned int stress_source_given ;	/**< @brief Whether stress-source was given.  */
  unsigned int lex_source_given ;	/**< @brief Whether lex-source was given.  */
  unsigned int combine_given ;	/**< @brief Whether combine was given.  */
  unsigned int combine_rate_given ;	/**< @brief Whether combine-rate was given.  */
  unsigned int boundary_method_given ;	/**< @brief Whether boundary-method was given.  */
  unsigned int peak_given ;	/**< @brief Whether peak was given.  */
  unsigned int threshold_given ;	/**< @brief Whether threshold was given.  */
  unsigned int norm_given ;	/**< @brief Whether norm was given.  */
  unsigned int vote_given ;	/**< @brief Whether vote was given.  */
  unsigned int prior_data_given ;	/**< @brief Whether prior-data was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_input_format_values[];  /**< @brief Possible values for input-format. */
extern const char *cmdline_parser_print_ptp_values[];  /**< @brief Possible values for print-ptp. */
extern const char *cmdline_parser_score_values[];  /**< @brief Possible values for score. */
extern const char *cmdline_parser_pred_m_values[];  /**< @brief Possible values for pred-m. */
extern const char *cmdline_parser_lexicon_partial_values[];  /**< @brief Possible values for lexicon-partial. */
extern const char *cmdline_parser_lex_wcombine_values[];  /**< @brief Possible values for lex-wcombine. */
extern const char *cmdline_parser_lex_norm_values[];  /**< @brief Possible values for lex-norm. */
extern const char *cmdline_parser_lex_values[];  /**< @brief Possible values for lex. */
extern const char *cmdline_parser_lex_dir_values[];  /**< @brief Possible values for lex-dir. */
extern const char *cmdline_parser_stress_values[];  /**< @brief Possible values for stress. */
extern const char *cmdline_parser_ub_type_values[];  /**< @brief Possible values for ub-type. */
extern const char *cmdline_parser_method_values[];  /**< @brief Possible values for method. */
extern const char *cmdline_parser_cues_values[];  /**< @brief Possible values for cues. */
extern const char *cmdline_parser_cue_source_values[];  /**< @brief Possible values for cue-source. */
extern const char *cmdline_parser_pred_source_values[];  /**< @brief Possible values for pred-source. */
extern const char *cmdline_parser_phon_source_values[];  /**< @brief Possible values for phon-source. */
extern const char *cmdline_parser_stress_source_values[];  /**< @brief Possible values for stress-source. */
extern const char *cmdline_parser_lex_source_values[];  /**< @brief Possible values for lex-source. */
extern const char *cmdline_parser_combine_values[];  /**< @brief Possible values for combine. */
extern const char *cmdline_parser_boundary_method_values[];  /**< @brief Possible values for boundary-method. */
extern const char *cmdline_parser_peak_values[];  /**< @brief Possible values for peak. */
extern const char *cmdline_parser_norm_values[];  /**< @brief Possible values for norm. */
extern const char *cmdline_parser_vote_values[];  /**< @brief Possible values for vote. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
